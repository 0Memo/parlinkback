// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//? @@index([groupId], map: "student_groupId_fkey")

model Categories {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  Ads       Ads[]
}

model Subjects {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  UserHasSubjects UserHasSubjects[]
}

model Users {
  id         Int        @id @default(autoincrement())
  firstName  String     @db.VarChar(70) @map("first_name")
  lastName   String     @db.VarChar(70) @map("last_name")
  email      String     @db.VarChar(70)
  role       UserRole
  status     UserStatus
  password   String     @db.VarChar(50)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  Profiles   Profiles?
  Ads        Ads[]
  Files      Files[]
  UserGroups UserGroups[]
  Messages   Messages[]
  UserHasAd  UserHasAd[]
  UserHasChild UserHasChild[]
  UserGroupHasUser UserGroupHasUser[]
  UserHasSubjects UserHasSubjects[]
}

model Profiles {
  id             Int      @id @default(autoincrement())
  phone          String   @db.VarChar(255)
  city           String   @db.VarChar(255)
  postalCode     String   @db.VarChar(255) @map("postal_code")
  address        String   @db.VarChar(255)
  profilePicture String   @db.VarChar(50) @map("profile_picture")
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt
  userId         Int      @unique
  Users          Users    @relation(fields: [userId], references: [id])

  @@unique([id, userId])
}

model Children {
  id         Int       @id @default(autoincrement())
  firstName  String?   @db.VarChar(255) @map("first_name")
  lastName   String?   @db.VarChar(50) @map("last_name")
  school     String?   @db.VarChar(50)
  class      String?   @db.VarChar(50)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
  UserHasChild UserHasChild[]
}

model Ads {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(50)
  description String   @db.VarChar(500)
  startTime  DateTime? @db.DateTime @map("start_time")
  endTime    DateTime? @db.DateTime @map("end_time")
  duration   Int?
  address    String    @db.VarChar(50)
  postalCode String    @db.VarChar(50) @map("postal_code")
  city       String    @db.VarChar(50)
  country    String    @db.VarChar(50)
  attendees  Int?
  transport  Transport?
  conform    Boolean?
  status     AdStatus?
  adPicture  String?   @db.VarChar(50) @map("ad_picture")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
  userId     Int
  categoryId Int
  Users      Users     @relation(fields: [userId], references: [id])
  Categories Categories @relation(fields: [categoryId], references: [id])
  AdHasFile  AdHasFile[]
  UserHasAd  UserHasAd[]

  @@index([userId], map: "user_id")
  @@index([categoryId], map: "category_id")
}

model Files {
  id         Int       @id @default(autoincrement())
  filePath   String    @db.VarChar(500) @map("file_path")
  fileType   FileType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  userId     Int
  Users      Users     @relation(fields: [userId], references: [id])
  AdHasFile  AdHasFile[]
  UserGroupHasFile UserGroupHasFile[]

  @@index([userId], map: "user_id")
}

model UserGroups {
  id         Int       @id @default(autoincrement())
  nom        String?   @db.VarChar(50)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
  userId     Int
  Users      Users     @relation(fields: [userId], references: [id])
  UserGroupHasUser UserGroupHasUser[]
  UserGroupHasFile UserGroupHasFile[]

  @@index([userId], map: "user_id")
}

model Messages {
  id               Int            @id @default(autoincrement())
  text             String         @db.VarChar(500)
  conform          Boolean?
  relatedEntityId  Int?           @map("related_entity_id")
  relatedEntityType RelatedEntityType? @map("related_entity_type")
  userId           Int
  Users            Users          @relation(fields: [userId], references: [id])

  @@index([userId], map: "user_id")
}

model UserHasAd {
  userId       Int
  adId         Int
  userAttendees Int?
  status       UserAdStatus?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt
  Users        Users     @relation(fields: [userId], references: [id])
  Ads          Ads       @relation(fields: [adId], references: [id])

  @@id([userId, adId])
  @@index([adId], map: "ad_id")
}

model UserHasChild {
  userId       Int
  childId      Int
  Users        Users     @relation(fields: [userId], references: [id])
  Children     Children  @relation(fields: [childId], references: [id])

  @@id([userId, childId])
  @@index([childId], map: "child_id")
}

model UserGroupHasUser {
  userId       Int
  userGroupId  Int
  status       UserGroupUserStatus?
  Users        Users        @relation(fields: [userId], references: [id])
  UserGroups   UserGroups   @relation(fields: [userGroupId], references: [id])

  @@id([userId, userGroupId])
  @@index([userGroupId], map: "user_group_id")
}

model AdHasFile {
  adId       Int
  fileId     Int
  Ads        Ads       @relation(fields: [adId], references: [id])
  Files      Files     @relation(fields: [fileId], references: [id])

  @@id([adId, fileId])
  @@index([fileId], map: "file_id")
}

model UserHasSubjects {
  userId     Int
  subjectId  Int
  Users      Users     @relation(fields: [userId], references: [id])
  Subjects   Subjects  @relation(fields: [subjectId], references: [id])

  @@id([userId, subjectId])
  @@index([subjectId], map: "fk_Users_has_Subjects_Subjects1_idx")
  @@index([userId], map: "fk_Users_has_Subjects_Users1_idx")
}

model UserGroupHasFile {
  fileId      Int
  userGroupId Int
  Files       Files       @relation(fields: [fileId], references: [id])
  UserGroups  UserGroups  @relation(fields: [userGroupId], references: [id])

  @@id([fileId, userGroupId])
  @@index([userGroupId], map: "fk_Files_has_User_groups_User_groups1_idx")
  @@index([fileId], map: "fk_Files_has_User_groups_Files1_idx")
}

enum UserRole {
  admin
  parent
  intervenant
}

enum UserStatus {
  activated
  unactivated
}

enum Transport {
  car
  van
}

enum AdStatus {
  cancel
  report
}

enum FileType {
  jpg
  png
}

enum RelatedEntityType {
  ad
  user_group
}

enum UserAdStatus {
  true
  false
}

enum UserGroupUserStatus {
  invited
  member
}