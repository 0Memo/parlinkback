// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(50)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  ads       Ad[]
  subCategory SubCategory[]
}

model SubCategory {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(50)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  ads       Ad[]
  categoryId String
  category  Category  @relation(fields: [categoryId], references: [id])

  @@unique([id, categoryId])
}

model Subject {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(50)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  userHasSubjects UserHasSubjects[]
}


//FIXME: AJOUTER PROFILE ID DANS TABLE USER ET ENLEVER USERID DE TABLE PROFILE
model User {
  id         String     @id @default(cuid())
  firstName  String     @db.VarChar(70)
  lastName   String     @db.VarChar(70)
  email      String     @db.VarChar(70)
  role       UserRole   @default(admin)
  status     UserStatus @default(activated)
  password   String     @db.VarChar(50)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  Profile    Profile?
  ads        Ad[]
  files      File[]
  userGroups UserGroup[]
  messages   Message[]
  userHasAd  UserHasAds[]
  userHasChild UserHasChildren[]
  userGroupHasUser UserGroupHasUsers[]
  userHasSubjects UserHasSubjects[]
}

model Profile {
  id             String    @id @default(cuid())
  phone          String    @db.VarChar(50)
  city           String    @db.VarChar(50)
  postalCode     String    @db.VarChar(50)
  address        String    @db.VarChar(100)
  profilePicture String    @db.VarChar(50)
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt
  userId         String    @unique
  user          User     @relation(fields: [userId], references: [id])

  @@unique([id, userId])
}

model Child {
  id         String    @id @default(cuid())
  firstName  String?   @db.VarChar(255)
  lastName   String?   @db.VarChar(50)
  school     String?   @db.VarChar(50)
  class      String?   @db.VarChar(50)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
  userHasChild UserHasChildren[]
}

model Ad {
  id         String     @id @default(cuid())
  title      String     @db.VarChar(50)
  description String    @db.VarChar(500)
  startTime  DateTime?  @db.DateTime
  endTime    DateTime?  @db.DateTime
  duration   Int?
  address    String     @db.VarChar(50)
  postalCode String     @db.VarChar(50)
  city       String     @db.VarChar(50)
  country    String     @db.VarChar(50)
  attendees  Int?
  transport  Transport?
  conform    Boolean?
  status     AdStatus?
  adPicture  String?    @db.VarChar(50)
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @default(now()) @updatedAt
  userId     String
  categoryId String
  subCategoryId String  @default("test")
  users      User       @relation(fields: [userId], references: [id])
  category   Category   @relation(fields: [categoryId], references: [id])
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])
  adHasFile  AdHasFile[]
  userHasAd  UserHasAds[]

  @@index([userId], map: "user_id")
  @@index([categoryId], map: "category_id")
  @@index([subCategoryId], map: "subCategory_id")
}

model File {
  id         String    @id @default(cuid())
  filePath   String    @db.VarChar(500)
  fileType   FileType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  userId     String
  users      User     @relation(fields: [userId], references: [id])
  adHasFile  AdHasFile[]
  userGroupHasFile UserGroupHasFiles[]

  @@index([userId], map: "user_id")
}

model UserGroup {
  id         String    @id @default(cuid())
  nom        String?   @db.VarChar(50)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
  userId     String
  user      User     @relation(fields: [userId], references: [id])
  userGroupHasUser UserGroupHasUsers[]
  userGroupHasFile UserGroupHasFiles[]

  @@index([userId], map: "user_id")
}

model Message {
  id               String         @id @default(cuid())
  text             String         @db.VarChar(500)
  conform          Boolean?
  relatedEntityId  Int?
  relatedEntityType RelatedEntityType?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
  userId           String
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId], map: "user_id")
}

model UserHasAds {
  userId       String
  adId         String
  userAttendees Int?
  status       UserAdStatus?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  ads          Ad       @relation(fields: [adId], references: [id])

  @@id([userId, adId])
  @@index([adId], map: "ad_id")
}

model UserHasChildren {
  userId       String
  childId      String
  user        User     @relation(fields: [userId], references: [id])
  children     Child  @relation(fields: [childId], references: [id])

  @@id([userId, childId])
  @@index([childId], map: "child_id")
}

model UserGroupHasUsers {
  userId       String
  userGroupId  String
  status       UserGroupUserStatus?
  users        User        @relation(fields: [userId], references: [id])
  userGroup   UserGroup   @relation(fields: [userGroupId], references: [id])

  @@id([userId, userGroupId])
  @@index([userGroupId], map: "user_group_id")
}

model AdHasFile {
  adId       String
  fileId     String
  ad        Ad       @relation(fields: [adId], references: [id])
  file      File     @relation(fields: [fileId], references: [id])

  @@id([adId, fileId])
  @@index([fileId], map: "file_id")
}

model UserHasSubjects {
  userId     String
  subjectId  String
  user      User     @relation(fields: [userId], references: [id])
  subjects   Subject  @relation(fields: [subjectId], references: [id])

  @@id([userId, subjectId])
  @@index([subjectId], map: "fk_Users_has_Subjects_Subjects1_idx")
  @@index([userId], map: "fk_Users_has_Subjects_Users1_idx")
}

model UserGroupHasFiles {
  fileId      String
  userGroupId String
  files       File       @relation(fields: [fileId], references: [id])
  userGroup  UserGroup  @relation(fields: [userGroupId], references: [id])

  @@id([fileId, userGroupId])
  @@index([userGroupId], map: "fk_Files_has_User_groups_User_groups1_idx")
  @@index([fileId], map: "fk_Files_has_User_groups_Files1_idx")
}

enum UserRole {
  admin
  parent
  intervenant
}

enum UserStatus {
  activated
  unactivated
}

enum Transport {
  car
  van
}

enum AdStatus {
  cancel
  report
}

enum FileType {
  jpg
  png
}

enum RelatedEntityType {
  ad
  user_group
}

enum UserAdStatus {
  true
  false
}

enum UserGroupUserStatus {
  invited
  member
}